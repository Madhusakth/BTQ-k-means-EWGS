dataset: cifar10	arch: resnet20_quant	num_workers: 4	seed: None	batch_size: 32	epochs: 400	optimizer_m: Adam	optimizer_q: Adam	lr_m: 0.001	lr_q: 1e-05	lr_m_end: 0.0	lr_q_end: 0.0	decay_schedule_m: 150-300	decay_schedule_q: 150-300	momentum: 0.9	weight_decay: 0.0001	lr_scheduler_m: cosine	lr_scheduler_q: cosine	gamma: 0.1	QWeightFlag: True	QActFlag: True	weight_levels: 256	act_levels: 256	baseline: False	bkwd_scaling_factorW: 0.0	bkwd_scaling_factorA: 0.0	use_hessian: True	update_every: 10	gpu_id: 1	log_dir: ../results/CIFAR10_ResNet50/W8A8_kmeans_comp_decomp_cv_12_pw_8/	load_pretrain: True	pretrain_path: ../results/ResNet20_CIFAR10/fp/checkpoint/best_checkpoint.pth	btq: True	training_flag: False	eval: False	weighted: False	cv_block_size: 12	pw_fc_block_size: 8	
Files already downloaded and verified
The number of parameters :  269940
Pretrained full precision weights are initialized
# total params: 269940
# model params: 269850
# quantizer params: 90
ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layer1): Sequential(
    (0): QBasicBlock(
      (conv1): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (1): QBasicBlock(
      (conv1): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (2): QBasicBlock(
      (conv1): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): QBasicBlock(
      (conv1): QConv(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): LambdaLayer()
    )
    (1): QBasicBlock(
      (conv1): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (2): QBasicBlock(
      (conv1): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): QBasicBlock(
      (conv1): QConv(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): LambdaLayer()
    )
    (1): QBasicBlock(
      (conv1): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (2): QBasicBlock(
      (conv1): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
  )
  (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 000 	 Test accuracy: 15.21 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 001 	 Test accuracy: 13.69 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 002 	 Test accuracy: 22.29 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 003 	 Test accuracy: 21.44 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 004 	 Test accuracy: 20.03 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 005 	 Test accuracy: 12.9 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 006 	 Test accuracy: 17.77 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 007 	 Test accuracy: 26.119999999999997 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 008 	 Test accuracy: 22.56 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 009 	 Test accuracy: 20.990000000000002 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:16<00:33, 16.77s/it] 67%|██████▋   | 2/3 [00:31<00:15, 15.72s/it]100%|██████████| 3/3 [00:48<00:00, 16.16s/it]100%|██████████| 3/3 [00:48<00:00, 16.16s/it]


scaleA
 [0.01688357508618896, 0.009922997929097156, 0.005745311661218313, 0.010902959613980641, 0.007352648415594712, 0.00889913903593093, 0.0066063934937927215, 0.013009598435168778, 0.011411847689266681, 0.012454204914171303, 0.010921483583498053, 0.01345786602449678, 0.012083667644211073, 0.02832580466900716, 0.014878915806411113, 0.02014988782097048, 0.008526620717389808, 0.005656640294044134]
scaleW
 [0.16088148936482952, 0.1358770930759058, 0.16596191224505247, 0.1059903095517875, 0.17103477755718002, 0.0853901194352315, 0.09039311123352851, 0.06611567001657347, 0.07054832247326823, 0.04451194771035907, 0.07392104190653824, 0.039848203152111995, 0.04656645837847893, 0.04216060428555871, 0.035456528156879503, 0.027823381529437762, 0.018828725734679336, 0.005118036334501021]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 010 	 Test accuracy: 19.55 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 011 	 Test accuracy: 22.09 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 012 	 Test accuracy: 25.27 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 013 	 Test accuracy: 33.489999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 014 	 Test accuracy: 16.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 015 	 Test accuracy: 28.64 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 016 	 Test accuracy: 31.97 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 017 	 Test accuracy: 35.65 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 018 	 Test accuracy: 29.39 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 019 	 Test accuracy: 26.33 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:14<00:28, 14.42s/it] 67%|██████▋   | 2/3 [00:31<00:16, 16.05s/it]100%|██████████| 3/3 [00:51<00:00, 17.81s/it]100%|██████████| 3/3 [00:51<00:00, 17.18s/it]


scaleA
 [0.013575884571180493, 0.008101511704807137, 0.004141654575549971, 0.007572108142889849, 0.00551199460245966, 0.0066977232356273024, 0.004359019939176825, 0.007007078969507291, 0.0036448379828266236, 0.007907481005751792, 0.0054473574264424845, 0.0128406685124699, 0.009120568363396642, 0.021969818336671536, 0.010206715771402095, 0.01358819975852521, 0.011427440795034242, 0.010355877020054973]
scaleW
 [0.1409076567590135, 0.1298609440757101, 0.11773132248682061, 0.04865397263133462, 0.12640968165969252, 0.06607212755706575, 0.0605600631270909, 0.03574993235681629, 0.03356583430244186, 0.023337719604815555, 0.04479887403471988, 0.031383624176283625, 0.034282796226302086, 0.02990431627009599, 0.02165793366379648, 0.01928311013253486, 0.01933811200266067, 0.008661888692254581]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 020 	 Test accuracy: 25.06 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 021 	 Test accuracy: 22.02 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 022 	 Test accuracy: 27.779999999999998 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 023 	 Test accuracy: 25.71 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 024 	 Test accuracy: 27.439999999999998 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 025 	 Test accuracy: 36.24 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 026 	 Test accuracy: 30.5 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 027 	 Test accuracy: 30.349999999999998 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 028 	 Test accuracy: 34.050000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 029 	 Test accuracy: 31.169999999999998 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:19<00:39, 19.73s/it] 67%|██████▋   | 2/3 [00:43<00:22, 22.12s/it]100%|██████████| 3/3 [01:02<00:00, 20.64s/it]100%|██████████| 3/3 [01:02<00:00, 20.81s/it]


scaleA
 [0.011611653575393899, 0.007130716028011098, 0.006690763307796034, 0.009938620212337226, 0.0020791325207964602, 0.005386208429165144, 0.00468931926454424, 0.009442211848137276, 0.005377255656103491, 0.009055684807654093, 0.009784494340857437, 0.011891190927171337, 0.006888722399692603, 0.016546906667082566, 0.01112177776383335, 0.015412108112735294, 0.010493729268254065, 0.010611554407826962]
scaleW
 [0.10837041922863862, 0.09644111179754562, 0.13575003826877072, 0.07618518154653389, 0.05959082108517912, 0.04073107561072306, 0.055596421848246064, 0.042153166607996284, 0.0343759235856906, 0.02648785172882666, 0.05621196963674416, 0.029397787061824523, 0.025566744297734423, 0.021257218258889442, 0.020336703177082274, 0.020310416509810858, 0.018037400419796092, 0.006254088192791599]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 030 	 Test accuracy: 31.269999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 031 	 Test accuracy: 41.53 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 032 	 Test accuracy: 28.499999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 033 	 Test accuracy: 33.57 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 034 	 Test accuracy: 43.43 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 035 	 Test accuracy: 22.759999999999998 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 036 	 Test accuracy: 43.480000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 037 	 Test accuracy: 50.83 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 038 	 Test accuracy: 40.64 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 039 	 Test accuracy: 32.75 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:22<00:44, 22.05s/it] 67%|██████▋   | 2/3 [00:43<00:21, 21.71s/it]100%|██████████| 3/3 [00:57<00:00, 18.10s/it]100%|██████████| 3/3 [00:57<00:00, 19.12s/it]


scaleA
 [0.006097174945508266, 0.004651535033448427, 0.0028247432072530648, 0.003127228823315053, 0.0025013782042637572, 0.0024564390543563874, 0.0009100918873358645, 0.003054932310080531, 0.004196104796847853, 0.008625214218793665, 0.0022332897318965354, 0.004042679040390768, 0.0052668714709639105, 0.013813331261014116, 0.007193466961572632, 0.008225997680812046, 0.00961530469864792, 0.008137446543653405]
scaleW
 [0.05327720835658332, 0.053888981098386024, 0.07002854046970612, 0.01613759820268715, 0.05639172795446424, 0.016415359471161624, 0.024388342836757896, 0.020583351520041485, 0.025672299916108875, 0.026229644846829454, 0.028794788204663812, 0.00807359701942963, 0.019187268594448383, 0.017485442497843548, 0.014143456624747072, 0.009941440122096875, 0.017182077134761553, 0.003969393919143118]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 040 	 Test accuracy: 45.46 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 041 	 Test accuracy: 39.96 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 042 	 Test accuracy: 37.86 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 043 	 Test accuracy: 32.550000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 044 	 Test accuracy: 48.64 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 045 	 Test accuracy: 42.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 046 	 Test accuracy: 30.28 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 047 	 Test accuracy: 33.48 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 048 	 Test accuracy: 42.18 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 049 	 Test accuracy: 29.25 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:16<00:32, 16.38s/it] 67%|██████▋   | 2/3 [00:33<00:16, 16.99s/it]100%|██████████| 3/3 [00:55<00:00, 19.18s/it]100%|██████████| 3/3 [00:55<00:00, 18.55s/it]


scaleA
 [0.014439851549463511, 0.007836723987952212, 0.006837054791392704, 0.011630729812051844, 0.005532807908444908, 0.006884945337467557, 0.005032770682501922, 0.009062834299913803, 0.012343847306666994, 0.01146886550835296, 0.004455005089539493, 0.005170732437526606, 0.007512676344612022, 0.019188383207954546, 0.016109098413121813, 0.017435034090958448, 0.009556701052720227, 0.00846390578526954]
scaleW
 [0.11442158121656613, 0.0965666385907417, 0.13129164070010074, 0.07856943651487804, 0.0857449928996243, 0.055616165639906984, 0.05420464750064993, 0.03685541212604317, 0.06699008155395256, 0.03180194851347494, 0.0345901354080918, 0.007801405068828465, 0.023961154378105202, 0.023447275627377848, 0.02786423542075038, 0.02006166144877408, 0.017998518074690682, 0.005072968031398772]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 050 	 Test accuracy: 49.26 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 051 	 Test accuracy: 36.58 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 052 	 Test accuracy: 49.03 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 053 	 Test accuracy: 40.87 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 054 	 Test accuracy: 44.57 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 055 	 Test accuracy: 40.089999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 056 	 Test accuracy: 32.61 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 057 	 Test accuracy: 42.86 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 058 	 Test accuracy: 28.71 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 059 	 Test accuracy: 38.98 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:20<00:40, 20.09s/it] 67%|██████▋   | 2/3 [00:36<00:17, 17.79s/it]100%|██████████| 3/3 [01:00<00:00, 20.91s/it]100%|██████████| 3/3 [01:00<00:00, 20.31s/it]


scaleA
 [0.017197887187254294, 0.011159653150586682, 0.007635157955019185, 0.012332327441041088, 0.007322255192826219, 0.010223198562029351, 0.007286034667030504, 0.01497753006082127, 0.010773714003698328, 0.013782158720725406, 0.008749896387142632, 0.016890271637015484, 0.012506010484128862, 0.026153845713874996, 0.014791886949396545, 0.025144349407297092, 0.013385984828447488, 0.015103233111658995]
scaleW
 [0.12296939551204465, 0.13149227977098132, 0.1462514588232203, 0.07824263350210241, 0.14593299955173508, 0.09100943599043611, 0.07614543763390998, 0.062267475260931106, 0.05747758101236441, 0.0372140342697679, 0.05559822127106903, 0.03950854248260834, 0.040260516833291855, 0.03241063452970815, 0.02778355401727718, 0.025354237136909652, 0.02203158973967745, 0.011164500751454016]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 060 	 Test accuracy: 23.200000000000003 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 061 	 Test accuracy: 36.15 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 062 	 Test accuracy: 31.240000000000002 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 063 	 Test accuracy: 32.43 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 064 	 Test accuracy: 44.24 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 065 	 Test accuracy: 39.129999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 066 	 Test accuracy: 43.120000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 067 	 Test accuracy: 34.2 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 068 	 Test accuracy: 39.31 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 069 	 Test accuracy: 38.97 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:16<00:33, 16.51s/it] 67%|██████▋   | 2/3 [00:36<00:18, 18.68s/it]100%|██████████| 3/3 [00:52<00:00, 17.39s/it]100%|██████████| 3/3 [00:52<00:00, 17.55s/it]


scaleA
 [0.02227517259573265, 0.013392644386290545, 0.0098149654376784, 0.0150124675190979, 0.007275604656045843, 0.010788120857431922, 0.00777382123432997, 0.015360430391116767, 0.010192593639831453, 0.014323425910504499, 0.01560465791893871, 0.016474742442545456, 0.010000111481352119, 0.023663908821220877, 0.01957442465002136, 0.019423552995495013, 0.016297613801171812, 0.013112175935428703]
scaleW
 [0.16549228400854402, 0.13714711084072298, 0.16026824678051088, 0.1083163208763263, 0.13752699831985257, 0.09417029126943839, 0.07839563564037472, 0.056652383391543805, 0.05423019656262762, 0.03438262097757979, 0.0802509340941685, 0.039481228133184186, 0.031691388095452924, 0.02879897526586592, 0.036350949468943995, 0.021564532115123644, 0.026045354773025737, 0.009063638421316076]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 070 	 Test accuracy: 30.130000000000003 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 071 	 Test accuracy: 42.230000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 072 	 Test accuracy: 38.56 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 073 	 Test accuracy: 44.940000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 074 	 Test accuracy: 49.61 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 075 	 Test accuracy: 37.39 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 076 	 Test accuracy: 48.4 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 077 	 Test accuracy: 45.95 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 078 	 Test accuracy: 42.15 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 079 	 Test accuracy: 45.92 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:23<00:46, 23.39s/it] 67%|██████▋   | 2/3 [00:42<00:21, 21.02s/it]100%|██████████| 3/3 [01:00<00:00, 19.47s/it]100%|██████████| 3/3 [01:00<00:00, 20.14s/it]


scaleA
 [0.014367656318926683, 0.008463024085907678, 0.006522729345882143, 0.009971094595995699, 0.006066258894967316, 0.007332434248169627, 0.005075355363992578, 0.009811378447118933, 0.007839676377654576, 0.011536424433334393, 0.006067307954473383, 0.01479056628536908, 0.010829823505845222, 0.02669705787148094, 0.017824056583821926, 0.029845476343550364, 0.016793241054976923, 0.015030073395318942]
scaleW
 [0.09181443901354729, 0.08385071277210347, 0.10732202406057607, 0.07856413832040167, 0.09816063944389679, 0.061570220053540174, 0.05996081409869249, 0.0419558312164482, 0.042774926465485925, 0.03434992858009953, 0.04401316152453732, 0.03357479255031229, 0.03573955301389851, 0.030195719485500386, 0.033742945740379636, 0.03135362026754899, 0.02775725512960235, 0.010760746027399246]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 080 	 Test accuracy: 43.59 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 081 	 Test accuracy: 51.480000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 082 	 Test accuracy: 44.24 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 083 	 Test accuracy: 30.409999999999997 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 084 	 Test accuracy: 46.93 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 085 	 Test accuracy: 47.449999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 086 	 Test accuracy: 42.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 087 	 Test accuracy: 31.86 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 088 	 Test accuracy: 33.82 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 383
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 089 	 Test accuracy: 44.29 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:17<00:35, 17.50s/it] 67%|██████▋   | 2/3 [00:33<00:16, 16.79s/it]100%|██████████| 3/3 [00:53<00:00, 18.22s/it]100%|██████████| 3/3 [00:53<00:00, 17.92s/it]


scaleA
 [0.018721655624074202, 0.009965502079397998, 0.008350121214555547, 0.013318737039203847, 0.003626748057698418, 0.009119379109434278, 0.005871828108669464, 0.012307597305516957, 0.011973176196320467, 0.018574765433077862, 0.012715812118068756, 0.016288029567346655, 0.00961511750260185, 0.023870545212256178, 0.016239478705821805, 0.0240376938484877, 0.017929876372872106, 0.011234724099237122]
scaleW
 [0.14039860105225632, 0.12439210737605828, 0.16306015233031765, 0.08121566330771707, 0.0958376431147382, 0.06365789663343334, 0.0635130420291458, 0.04420699416678608, 0.06114660266202173, 0.0474189143668976, 0.06821920277493287, 0.038252190096905996, 0.03117431216446102, 0.02820660731131543, 0.02792389525488428, 0.02323506915604766, 0.031998102850145094, 0.0070323207083395275]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 090 	 Test accuracy: 50.81 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 091 	 Test accuracy: 43.08 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 092 	 Test accuracy: 37.64 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 093 	 Test accuracy: 26.88 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 094 	 Test accuracy: 55.46 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 095 	 Test accuracy: 56.830000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 383
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 096 	 Test accuracy: 41.31 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 097 	 Test accuracy: 59.330000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 098 	 Test accuracy: 51.64 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 099 	 Test accuracy: 38.66 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:21<00:42, 21.44s/it] 67%|██████▋   | 2/3 [00:33<00:15, 15.89s/it]100%|██████████| 3/3 [00:50<00:00, 16.44s/it]100%|██████████| 3/3 [00:50<00:00, 16.87s/it]


scaleA
 [0.005567496984239134, 0.00311627870757721, 0.0030827452486922717, 0.002207624244444999, 0.0013639384455071816, 0.0038821398299787343, 0.003234504594672684, 0.006943502948762686, 0.008543562641713081, 0.009858680301189799, 0.005901357025302004, 0.009786932755149804, 0.005016277392678382, 0.0121528617527272, 0.006783027679654138, 0.005270200008680177, 0.005068261126458228, 0.00899268645938256]
scaleW
 [0.04556298725200104, 0.048699790601353564, 0.06917084781111488, 0.013859998549002647, 0.043433251815610065, 0.024609731355321515, 0.03765501604271607, 0.03320528123077394, 0.04493171960238183, 0.026897451081060397, 0.03774813802841833, 0.02284830503912261, 0.018042733170823822, 0.01561822067805469, 0.013444964348768679, 0.005275190452840385, 0.006567976244677255, 0.005936098157753437]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 100 	 Test accuracy: 27.77 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 101 	 Test accuracy: 46.239999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 102 	 Test accuracy: 51.790000000000006 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 103 	 Test accuracy: 60.28 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 104 	 Test accuracy: 41.19 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 105 	 Test accuracy: 39.95 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 106 	 Test accuracy: 34.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 107 	 Test accuracy: 49.85 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 108 	 Test accuracy: 49.81 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 109 	 Test accuracy: 50.42 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:14<00:28, 14.28s/it] 67%|██████▋   | 2/3 [00:34<00:17, 17.53s/it]100%|██████████| 3/3 [00:53<00:00, 18.49s/it]100%|██████████| 3/3 [00:53<00:00, 17.92s/it]


scaleA
 [0.008927233577374707, 0.005350508307807596, 0.005028038137756685, 0.009620062724788448, 0.006195348114140477, 0.006152354786243045, 0.004214286739159959, 0.0095389236331303, 0.0063817958113770445, 0.008788187778991582, 0.008503679883723997, 0.012040178688609583, 0.007647806257754845, 0.020084228435120404, 0.012404668683674595, 0.019987065585191758, 0.012324937219719494, 0.00738294337354285]
scaleW
 [0.055330718835636894, 0.0637807531305155, 0.10488651730013142, 0.06414208789286015, 0.11785600821487914, 0.04854114806991048, 0.05277827572974198, 0.041098104324583114, 0.03748182675892605, 0.024396720102752744, 0.05140898551939516, 0.02772167148475445, 0.025834942870138187, 0.02509598568672887, 0.022135458919314427, 0.021675128641890824, 0.02109906362611892, 0.004776403314555365]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 383
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 110 	 Test accuracy: 44.96 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 111 	 Test accuracy: 49.72 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 112 	 Test accuracy: 49.19 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 113 	 Test accuracy: 47.73 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 114 	 Test accuracy: 42.46 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 115 	 Test accuracy: 51.44 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 116 	 Test accuracy: 57.89 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 117 	 Test accuracy: 53.04 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 118 	 Test accuracy: 55.65 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 119 	 Test accuracy: 48.26 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:20<00:40, 20.07s/it] 67%|██████▋   | 2/3 [00:37<00:18, 18.65s/it]100%|██████████| 3/3 [00:56<00:00, 18.69s/it]100%|██████████| 3/3 [00:56<00:00, 18.84s/it]


scaleA
 [0.014841900226710442, 0.008565887575749933, 0.0061068885739185815, 0.009390251113766148, 0.005358593246431562, 0.008224348239577559, 0.0040254956261495155, 0.009062126864680766, 0.006545065384622118, 0.00909085132728103, 0.009601754188440859, 0.011978207212425596, 0.008185800551804278, 0.019503188689413264, 0.010586857963495863, 0.015888607071256448, 0.009351619504566644, 0.01166636615258669]
scaleW
 [0.1177738371891928, 0.09825630054201806, 0.10603278489654588, 0.061302987498579965, 0.08973948145798509, 0.06133032888246922, 0.05321626461500831, 0.041489897931798025, 0.03747148227293672, 0.021560057757868494, 0.05151912849699467, 0.02547717591297226, 0.023997750239867333, 0.024553879760483437, 0.01739076986108141, 0.016832586427013723, 0.01695071126488905, 0.008075795299010731]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 120 	 Test accuracy: 53.87 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 121 	 Test accuracy: 36.52 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 122 	 Test accuracy: 56.57 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 123 	 Test accuracy: 51.739999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 124 	 Test accuracy: 63.629999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 125 	 Test accuracy: 57.410000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 126 	 Test accuracy: 47.69 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 383
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 127 	 Test accuracy: 53.910000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 128 	 Test accuracy: 54.169999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 129 	 Test accuracy: 46.300000000000004 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:20<00:40, 20.13s/it] 67%|██████▋   | 2/3 [00:37<00:18, 18.24s/it]100%|██████████| 3/3 [00:55<00:00, 18.18s/it]100%|██████████| 3/3 [00:55<00:00, 18.40s/it]


scaleA
 [0.013167866178340851, 0.0075701803648241485, 0.0053293720733075985, 0.008709963869269666, 0.005679745950203908, 0.005853518812990022, 0.004536360415600629, 0.010766106892291778, 0.009088039906571876, 0.011802364042185778, 0.002986079962722968, 0.0033005369632718965, 0.009030077926208148, 0.021697470060109313, 0.011841321456706551, 0.01160491131997938, 0.00733591316683687, 0.009970492602555779]
scaleW
 [0.10271159413059716, 0.10141347373044729, 0.13099519446702843, 0.06855940829530688, 0.09091778193581895, 0.049537858771915105, 0.058552424886533276, 0.04971315154157719, 0.057745719008692416, 0.03381452060850392, 0.03122179326389075, 0.0, 0.02935381295906346, 0.030393579600857975, 0.021328153179346554, 0.011543641674728848, 0.006597378657341484, 0.005900722194425477]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 130 	 Test accuracy: 62.980000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 131 	 Test accuracy: 64.2 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 132 	 Test accuracy: 55.059999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 133 	 Test accuracy: 54.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 134 	 Test accuracy: 46.67 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 135 	 Test accuracy: 47.44 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 136 	 Test accuracy: 59.84 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 137 	 Test accuracy: 53.510000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 138 	 Test accuracy: 55.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 139 	 Test accuracy: 66.74 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:36, 18.15s/it] 67%|██████▋   | 2/3 [00:39<00:19, 19.88s/it]100%|██████████| 3/3 [00:59<00:00, 20.03s/it]100%|██████████| 3/3 [00:59<00:00, 19.83s/it]


scaleA
 [0.015814997096763154, 0.008700016426972629, 0.006688970411171075, 0.00914329991683023, 0.007250054499861301, 0.007990376253974954, 0.004523503493925824, 0.008544431836535402, 0.008796455346747157, 0.012808149322635175, 0.008139151993654862, 0.01098726072460486, 0.008961481555823115, 0.0196019334736713, 0.010470432543508644, 0.012385178826357085, 0.012268384167186952, 0.011931583663241365]
scaleW
 [0.1179178352292914, 0.10500155960583718, 0.10471563595909046, 0.05950539392296794, 0.09521346225716625, 0.05845332828142133, 0.0565456816264455, 0.0380634267954081, 0.04684900652614985, 0.034257757180948055, 0.04424675740250412, 0.019284953756078988, 0.027925414338578466, 0.025794640504053962, 0.019843203822892706, 0.013027508514954786, 0.022284451116763335, 0.008745173395387447]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 140 	 Test accuracy: 63.080000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 141 	 Test accuracy: 61.0 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 142 	 Test accuracy: 43.96 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 143 	 Test accuracy: 37.92 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 144 	 Test accuracy: 54.49 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 145 	 Test accuracy: 47.699999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 146 	 Test accuracy: 50.629999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 147 	 Test accuracy: 58.18 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 148 	 Test accuracy: 65.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 149 	 Test accuracy: 45.0 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:15<00:30, 15.38s/it] 67%|██████▋   | 2/3 [00:31<00:15, 15.64s/it]100%|██████████| 3/3 [00:47<00:00, 16.11s/it]100%|██████████| 3/3 [00:47<00:00, 15.98s/it]


scaleA
 [0.022115915763024453, 0.011587941514882178, 0.010244256903502662, 0.015647848194743352, 0.008602984590474578, 0.009550181444060215, 0.00624569857171324, 0.013347028358773957, 0.015010605962765593, 0.016277400291114724, 0.008279316205721908, 0.011616533289963912, 0.009818378445180617, 0.023626153262144622, 0.02193280289867285, 0.027413003193267376, 0.011053172273789741, 0.008472315094041482]
scaleW
 [0.19344298565777743, 0.14918919128678906, 0.19872120962619264, 0.1105878127592513, 0.14976144948895984, 0.06950041031089037, 0.07519006090043878, 0.06704868974586115, 0.07659051485955252, 0.04204554548578393, 0.05517596836151049, 0.030256349619218303, 0.0355027430747711, 0.030488796385913952, 0.04182956515906958, 0.03201643824127539, 0.017596697211905033, 0.005090758573718919]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 150 	 Test accuracy: 59.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 151 	 Test accuracy: 56.87 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 152 	 Test accuracy: 49.919999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 153 	 Test accuracy: 60.260000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 154 	 Test accuracy: 48.83 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 155 	 Test accuracy: 62.86000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 156 	 Test accuracy: 56.28999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 157 	 Test accuracy: 56.06 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 158 	 Test accuracy: 67.67999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 159 	 Test accuracy: 58.709999999999994 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:16<00:33, 16.56s/it] 67%|██████▋   | 2/3 [00:36<00:18, 18.29s/it]100%|██████████| 3/3 [00:50<00:00, 16.55s/it]100%|██████████| 3/3 [00:50<00:00, 16.86s/it]


scaleA
 [0.019312997217856297, 0.010581605374150286, 0.009479563680374071, 0.014823113038675667, 0.008197270804955666, 0.009513024788108655, 0.006468709732457489, 0.014396000760784256, 0.007812245855758554, 0.012147721285824415, 0.010040414504366709, 0.013884619882057593, 0.010379658464125625, 0.022298418914972844, 0.015774276393651563, 0.01878091280093512, 0.017643916701788515, 0.017896628283033292]
scaleW
 [0.18461079152915136, 0.14882292643132314, 0.169293665591269, 0.11023687283118362, 0.16167933589305392, 0.07656607030129343, 0.07588366025675132, 0.061867931646505135, 0.05040558026776295, 0.034598237003578176, 0.056765599933773135, 0.03219568329464803, 0.03305353004884957, 0.028600300595701306, 0.032449050767207284, 0.018867856569037368, 0.028508903695374094, 0.014862410163117559]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 160 	 Test accuracy: 48.449999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 161 	 Test accuracy: 53.449999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 162 	 Test accuracy: 61.91 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 163 	 Test accuracy: 64.39 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 164 	 Test accuracy: 55.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 165 	 Test accuracy: 59.85 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 166 	 Test accuracy: 51.54 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 167 	 Test accuracy: 55.78999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 168 	 Test accuracy: 61.31999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 169 	 Test accuracy: 60.019999999999996 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:17<00:34, 17.27s/it] 67%|██████▋   | 2/3 [00:34<00:17, 17.21s/it]100%|██████████| 3/3 [00:53<00:00, 17.94s/it]100%|██████████| 3/3 [00:53<00:00, 17.76s/it]


scaleA
 [0.016554940684325798, 0.009917913627851313, 0.00924845381955855, 0.011134931482753345, 0.0059136930534386236, 0.007931041604494279, 0.004031052166893287, 0.007824209874992813, 0.006062544031920834, 0.010033326343365644, 0.0060443230065452104, 0.010382092903822998, 0.008598410774972304, 0.02448064443888977, 0.0195609349040505, 0.026788150665001842, 0.014924013135227768, 0.016575231621852125]
scaleW
 [0.14007086087170698, 0.1156854884339918, 0.18406376722905185, 0.08745827617157705, 0.11062073715441406, 0.0663696566182867, 0.05798890936804176, 0.04150748827065751, 0.042292850934305036, 0.035327116338427285, 0.0422277127060586, 0.021138880424494893, 0.032369347051775334, 0.02985051034136671, 0.03422191171617154, 0.029816669099634357, 0.028378098457018847, 0.01391244249089985]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 170 	 Test accuracy: 64.28 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 171 	 Test accuracy: 68.63 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 172 	 Test accuracy: 57.63 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 173 	 Test accuracy: 56.54 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 174 	 Test accuracy: 62.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 175 	 Test accuracy: 53.97 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 176 	 Test accuracy: 69.51 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 177 	 Test accuracy: 53.23 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 178 	 Test accuracy: 66.7 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 179 	 Test accuracy: 58.57 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:23<00:47, 23.97s/it] 67%|██████▋   | 2/3 [00:45<00:22, 22.65s/it]100%|██████████| 3/3 [01:04<00:00, 20.90s/it]100%|██████████| 3/3 [01:04<00:00, 21.52s/it]


scaleA
 [0.015116040509542577, 0.007889820500279605, 0.006492721659306003, 0.009669510947172043, 0.0061016643687736944, 0.006944372531074956, 0.0046205650094889635, 0.009187935114768946, 0.006695270034405526, 0.008226897954341497, 0.009172088330162314, 0.01086432550014226, 0.006289539799429974, 0.013066013601880528, 0.012668723506287038, 0.016821163355457736, 0.004769701466031686, 0.010047522270155602]
scaleW
 [0.11494775857915612, 0.0892704418216315, 0.11412984771891023, 0.06769540715536644, 0.10800110607250679, 0.05944364487868189, 0.05410260203807064, 0.039477260269003216, 0.03865155610933897, 0.026655092051863283, 0.053529534018657565, 0.028955483401824123, 0.022510810262242054, 0.017671418420141888, 0.026142322348157377, 0.019066653781628414, 0.01098727616902573, 0.0059112476873446375]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 180 	 Test accuracy: 63.2 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 181 	 Test accuracy: 62.09 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 182 	 Test accuracy: 62.71 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 383
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 183 	 Test accuracy: 61.760000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 184 	 Test accuracy: 72.53 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 185 	 Test accuracy: 75.63 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 186 	 Test accuracy: 71.72 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 187 	 Test accuracy: 66.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 188 	 Test accuracy: 63.7 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 189 	 Test accuracy: 64.01 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:15<00:31, 15.99s/it] 67%|██████▋   | 2/3 [00:39<00:20, 20.51s/it]100%|██████████| 3/3 [00:55<00:00, 18.19s/it]100%|██████████| 3/3 [00:55<00:00, 18.38s/it]


scaleA
 [0.023565239690738305, 0.010677678851622888, 0.009459608250151616, 0.01688210166992601, 0.005874755602615703, 0.008554154073895795, 0.006748650472488822, 0.014646405972356294, 0.011746815041529371, 0.015191072030960534, 0.01276899645903147, 0.0187327559942612, 0.012946628644879011, 0.028872746721872813, 0.019133929998461686, 0.025460855585921427, 0.017133969980714345, 0.01909926966628617]
scaleW
 [0.1519283266879916, 0.12865260840083792, 0.17339165755082164, 0.10898267471197831, 0.11840579175824173, 0.05610031015951664, 0.07464684153444233, 0.06182903949311055, 0.06512228094736959, 0.045312669673627494, 0.07380420675499959, 0.04222899883462975, 0.04303211067152655, 0.03873658756872055, 0.03518675497229276, 0.028767723047940185, 0.02919896750508885, 0.016770063315220175]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 190 	 Test accuracy: 70.93 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 191 	 Test accuracy: 70.33 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 383
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 192 	 Test accuracy: 67.22 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 193 	 Test accuracy: 73.13 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 194 	 Test accuracy: 73.44000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 195 	 Test accuracy: 70.94 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 196 	 Test accuracy: 73.74000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 197 	 Test accuracy: 74.18 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 198 	 Test accuracy: 71.7 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 199 	 Test accuracy: 71.38 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:13<00:26, 13.00s/it] 67%|██████▋   | 2/3 [00:28<00:14, 14.28s/it]100%|██████████| 3/3 [00:45<00:00, 15.52s/it]100%|██████████| 3/3 [00:45<00:00, 15.07s/it]


scaleA
 [0.020643414228384078, 0.011186998952796933, 0.008277426226256303, 0.014064108311282195, 0.009373569028380676, 0.008870255075963127, 0.0059663741145600325, 0.01154486856008354, 0.008580598237837954, 0.012770181913454734, 0.010075522787179879, 0.013812535505735525, 0.011047721365427277, 0.02347652329841686, 0.013867877593412098, 0.018089661589664827, 0.009633821788280471, 0.008334747659666892]
scaleW
 [0.14615294372708396, 0.11901819924817773, 0.12402330107326776, 0.09784647863031927, 0.14882206793314712, 0.07053379062173189, 0.07060277999709501, 0.05005540073760396, 0.04497453996394765, 0.04047783854870005, 0.06195751341772878, 0.03333265960095499, 0.038426732361129666, 0.0315977044686974, 0.026016626561002287, 0.02062252136234725, 0.018415477289888304, 0.0036691753065246275]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 200 	 Test accuracy: 65.32 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 201 	 Test accuracy: 69.47 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 202 	 Test accuracy: 62.86000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 203 	 Test accuracy: 75.52 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 204 	 Test accuracy: 59.07 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 205 	 Test accuracy: 74.7 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 206 	 Test accuracy: 70.42 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 207 	 Test accuracy: 74.2 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 208 	 Test accuracy: 67.22 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 209 	 Test accuracy: 71.8 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:37, 18.73s/it] 67%|██████▋   | 2/3 [00:30<00:14, 14.44s/it]100%|██████████| 3/3 [00:49<00:00, 16.46s/it]100%|██████████| 3/3 [00:49<00:00, 16.36s/it]


scaleA
 [0.021551460031447377, 0.009823733023767418, 0.007864326893939936, 0.012827639780638134, 0.010909283443225351, 0.009009588175076029, 0.0054960512660811025, 0.010938711000957071, 0.007204904508099466, 0.01072861665596687, 0.009563583382056753, 0.011944479948883965, 0.007461051335557848, 0.01638733509054484, 0.013800043881458396, 0.02074222868298855, 0.01679745981350664, 0.012487851691208257]
scaleW
 [0.1499965433869925, 0.11720667211596499, 0.1395080439441528, 0.07732394437463645, 0.16314139264040342, 0.08055333466348859, 0.06314633034665239, 0.0506986131801696, 0.03859547640785535, 0.035596170802997346, 0.06269943392976676, 0.027518624879018943, 0.02869372204804103, 0.02221353673755323, 0.026114886093817263, 0.023188144635307214, 0.031341544798224076, 0.010318533278140814]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 210 	 Test accuracy: 68.78 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 211 	 Test accuracy: 75.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 212 	 Test accuracy: 75.57000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 213 	 Test accuracy: 75.58 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 214 	 Test accuracy: 70.55 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 215 	 Test accuracy: 77.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 216 	 Test accuracy: 71.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 217 	 Test accuracy: 75.21 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 218 	 Test accuracy: 73.97 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 219 	 Test accuracy: 72.76 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:21<00:42, 21.21s/it] 67%|██████▋   | 2/3 [00:41<00:20, 20.52s/it]100%|██████████| 3/3 [01:02<00:00, 20.74s/it]100%|██████████| 3/3 [01:02<00:00, 20.76s/it]


scaleA
 [0.01627888692402801, 0.007238361864070119, 0.006232199446590069, 0.009637288353281974, 0.004809980852884766, 0.005947634788207967, 0.005012808446075097, 0.01081874225525369, 0.008687768315989478, 0.010544316045476657, 0.006743273084259254, 0.012121604013639245, 0.007436528276761977, 0.015885378083467846, 0.006807967404875978, 0.006743371763376159, 0.0036832976192438405, 0.003220003814387805]
scaleW
 [0.11363919310356041, 0.08729167109292994, 0.10095631392831168, 0.05308184917259143, 0.0988248445938482, 0.061991031241851735, 0.0629731676890376, 0.04858001153604909, 0.048660523600795126, 0.040121115176933904, 0.04272294089928855, 0.03323978911263729, 0.02877881948088253, 0.0237063265940143, 0.016151878943379033, 0.009337958068231301, 0.007009367566922637, 0.0006241632002237526]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 220 	 Test accuracy: 72.33000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 221 	 Test accuracy: 73.00999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 222 	 Test accuracy: 58.98 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 223 	 Test accuracy: 71.53 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 224 	 Test accuracy: 68.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 225 	 Test accuracy: 71.89 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 226 	 Test accuracy: 72.43 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 227 	 Test accuracy: 55.489999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 228 	 Test accuracy: 67.69 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 229 	 Test accuracy: 67.95 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:21<00:42, 21.33s/it] 67%|██████▋   | 2/3 [00:42<00:21, 21.02s/it]100%|██████████| 3/3 [01:01<00:00, 20.29s/it]100%|██████████| 3/3 [01:01<00:00, 20.54s/it]


scaleA
 [0.01971381533977334, 0.009893367648804592, 0.009493553410878838, 0.013803760827004227, 0.006709091976634222, 0.007956615942929216, 0.006547081527381038, 0.013506004990311897, 0.009361692992910913, 0.014992903808544568, 0.010208757110633723, 0.012472099184969797, 0.008947754926430887, 0.020225590541707413, 0.018319389684086678, 0.02766982692075093, 0.00963709926058264, 0.012161274672529516]
scaleW
 [0.15330443562809526, 0.13253607405879364, 0.146971298838745, 0.09694967555508897, 0.13525514304012123, 0.08531165004953174, 0.08771134814880127, 0.06612152558060883, 0.06048001936542585, 0.0435870594642942, 0.07015638970171455, 0.0351065848986549, 0.0326145580004446, 0.031179249108736155, 0.03758434369581099, 0.032651371824782935, 0.018468753572582115, 0.006718927144405487]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 230 	 Test accuracy: 74.15 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 231 	 Test accuracy: 75.61 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 232 	 Test accuracy: 75.55 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 233 	 Test accuracy: 77.46 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 234 	 Test accuracy: 73.74000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 235 	 Test accuracy: 59.18 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 236 	 Test accuracy: 73.95 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 237 	 Test accuracy: 79.38 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 238 	 Test accuracy: 68.63 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 239 	 Test accuracy: 77.2 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:22<00:44, 22.13s/it] 67%|██████▋   | 2/3 [00:41<00:20, 20.71s/it]100%|██████████| 3/3 [00:58<00:00, 18.71s/it]100%|██████████| 3/3 [00:58<00:00, 19.41s/it]


scaleA
 [0.014120232792380763, 0.006831989807634653, 0.008772009864857284, 0.012888094170378917, 0.007837808892779496, 0.006542824418917029, 0.0035797358748934373, 0.006378497013965899, 0.004313559365314669, 0.007077214930473987, 0.010724687407514588, 0.01486779753971274, 0.008478329713525416, 0.01881578634894662, 0.008245964104393074, 0.012944304131370812, 0.012288828691925345, 0.011912541160258213]
scaleW
 [0.08153437822644338, 0.10021598916699141, 0.1539093022740855, 0.1197431652003522, 0.13304624742707638, 0.07428884330618496, 0.04371259432295325, 0.03150933839080813, 0.035356252897451805, 0.021407540736260413, 0.06573151940153665, 0.038806675351475174, 0.028284081400470923, 0.029354218638604896, 0.015001786897778847, 0.016046876836953865, 0.023810576271396988, 0.009274234157591148]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 240 	 Test accuracy: 72.88 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 241 	 Test accuracy: 77.75999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 242 	 Test accuracy: 78.71000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 243 	 Test accuracy: 78.13 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 244 	 Test accuracy: 76.22 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 245 	 Test accuracy: 78.94 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 246 	 Test accuracy: 71.67 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 383
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 247 	 Test accuracy: 74.91 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 248 	 Test accuracy: 77.25 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 249 	 Test accuracy: 76.55999999999999 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:16<00:32, 16.07s/it] 67%|██████▋   | 2/3 [00:32<00:16, 16.34s/it]100%|██████████| 3/3 [00:52<00:00, 18.07s/it]100%|██████████| 3/3 [00:52<00:00, 17.59s/it]


scaleA
 [0.016328416588345728, 0.007598503351776917, 0.009095504976710852, 0.013487475747496336, 0.00522134634288043, 0.006322586809818326, 0.003966639134377728, 0.008334721688789655, 0.005565177224205503, 0.006144114559236388, 0.003049668475825692, 0.00763655223236779, 0.009612672592842856, 0.01981054467558089, 0.010859534811222827, 0.008617442468335375, 0.0101362337996723, 0.012432650589026484]
scaleW
 [0.12513290997262042, 0.08869655207526068, 0.15989979670873336, 0.10341559221375146, 0.1012596290639571, 0.05706961531094579, 0.05448872024910775, 0.0443223854555311, 0.04304286073222776, 0.022315839770454607, 0.03822484707795581, 0.014304578851625874, 0.038417466831778616, 0.025081913349477677, 0.024273458501733913, 0.01589358358822469, 0.020719188128831462, 0.007799323704799713]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 250 	 Test accuracy: 79.28 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 251 	 Test accuracy: 74.8 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 252 	 Test accuracy: 78.67 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 253 	 Test accuracy: 78.47 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 254 	 Test accuracy: 78.51 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 255 	 Test accuracy: 81.16 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 256 	 Test accuracy: 66.91 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 257 	 Test accuracy: 76.06 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 258 	 Test accuracy: 78.17 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 259 	 Test accuracy: 82.16 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:37, 18.70s/it] 67%|██████▋   | 2/3 [00:32<00:16, 16.05s/it]100%|██████████| 3/3 [00:51<00:00, 17.28s/it]100%|██████████| 3/3 [00:51<00:00, 17.23s/it]


scaleA
 [0.02539641228526084, 0.012430211423729626, 0.013882498650637835, 0.017771483322440194, 0.00802562311405234, 0.008657482289516632, 0.00746970198535415, 0.013572452972571857, 0.009614942382406065, 0.013177404341810394, 0.011436111181602432, 0.01786966212429139, 0.01344774759416982, 0.030108850012667637, 0.018704459572616957, 0.02598854851535493, 0.01633221509078394, 0.016894424081574152]
scaleW
 [0.20707569666964662, 0.19096268770501398, 0.2603348006977131, 0.15513638289070256, 0.16084415312909536, 0.08415276408562083, 0.1049543597655808, 0.06293524626483576, 0.06642052901797346, 0.04531308663180542, 0.08246623313597438, 0.051500967751677694, 0.04565983257062773, 0.044437231610425086, 0.038613262270051504, 0.033389801172961246, 0.032681963374241015, 0.015458281030419107]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 260 	 Test accuracy: 76.21 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 261 	 Test accuracy: 81.6 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 262 	 Test accuracy: 82.92 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 263 	 Test accuracy: 79.67999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 264 	 Test accuracy: 80.96 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 265 	 Test accuracy: 79.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 266 	 Test accuracy: 81.51 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 267 	 Test accuracy: 74.95 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 268 	 Test accuracy: 80.71000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 269 	 Test accuracy: 80.95 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:37, 18.60s/it] 67%|██████▋   | 2/3 [00:33<00:16, 16.57s/it]100%|██████████| 3/3 [00:56<00:00, 19.21s/it]100%|██████████| 3/3 [00:56<00:00, 18.72s/it]


scaleA
 [0.01598215193406954, 0.007655048947490722, 0.007144115401150412, 0.01217584331608017, 0.008410382446728175, 0.006675439849650233, 0.004934992095346821, 0.010187870801767005, 0.007135586402109574, 0.00865191989058503, 0.005221044553525209, 0.004998438459819177, 0.009800550760212877, 0.025079550640334167, 0.007219599124209153, 0.0008641288296217086, 0.013165226569402158, 0.012209677331521805]
scaleW
 [0.12786948059577555, 0.10556148857719637, 0.13257626078729212, 0.09643317043762091, 0.14538112556340055, 0.07015215962466369, 0.07065578336266454, 0.049529591991730175, 0.049621140633777545, 0.03369883616536862, 0.04351932415206263, 0.014346761157421528, 0.04412794888187446, 0.04067697412331832, 0.020687634799531125, 0.0035979734921554635, 0.027822613589329855, 0.011964979192365693]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 270 	 Test accuracy: 79.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 271 	 Test accuracy: 74.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 272 	 Test accuracy: 79.71000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 273 	 Test accuracy: 79.66 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 274 	 Test accuracy: 83.21 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 275 	 Test accuracy: 81.53 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 276 	 Test accuracy: 78.99000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 277 	 Test accuracy: 80.01 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 278 	 Test accuracy: 76.86 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 279 	 Test accuracy: 81.46 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:36, 18.17s/it] 67%|██████▋   | 2/3 [00:34<00:16, 16.96s/it]100%|██████████| 3/3 [00:52<00:00, 17.75s/it]100%|██████████| 3/3 [00:53<00:00, 17.67s/it]


scaleA
 [0.022052743922572966, 0.011424513819020515, 0.010081898313379724, 0.013242081220354909, 0.008111466592253244, 0.007872612829963722, 0.005581873991989404, 0.011516320492403365, 0.012895489935664, 0.0149484126724525, 0.009616110819225955, 0.012815386668564965, 0.012385231948620705, 0.0240139981914986, 0.009823121176051388, 0.01270930053916384, 0.008738990395047592, 0.010068938809091536]
scaleW
 [0.15910729829171932, 0.13935296193427635, 0.17844060838106213, 0.09814874988004633, 0.14090121028241429, 0.06928590695458252, 0.06714366500791873, 0.05356977924330983, 0.07086387265909744, 0.048453741857766595, 0.05972114535390546, 0.03464673494805195, 0.04775493798552876, 0.035464463805308835, 0.025379371463301614, 0.01967760855814533, 0.021055916246113294, 0.004243718314232832]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 280 	 Test accuracy: 81.96 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 281 	 Test accuracy: 82.35 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 282 	 Test accuracy: 81.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 283 	 Test accuracy: 82.85 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 284 	 Test accuracy: 83.19 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 285 	 Test accuracy: 83.39 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 286 	 Test accuracy: 83.27 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 287 	 Test accuracy: 83.73 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 383
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 288 	 Test accuracy: 82.97 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 289 	 Test accuracy: 81.35 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:23<00:47, 23.94s/it] 67%|██████▋   | 2/3 [00:40<00:19, 19.37s/it]100%|██████████| 3/3 [00:56<00:00, 17.95s/it]100%|██████████| 3/3 [00:56<00:00, 18.80s/it]


scaleA
 [0.021110044261940474, 0.009833744712283758, 0.009271931459556156, 0.009883397217149098, 0.00810792854764838, 0.008229995811246614, 0.005309744557731345, 0.008550518542788555, 0.005115789203305314, 0.008863335283994129, 0.01128977175050993, 0.014667573088849693, 0.007615008247681826, 0.018080700403504332, 0.015918459962539728, 0.021614430785738773, 0.011504193424251167, 0.009126981374950015]
scaleW
 [0.14902956766787606, 0.15028240382675895, 0.16380748717050822, 0.07400095362272452, 0.15827291862869322, 0.113661578895418, 0.06827509724754077, 0.05109243229821614, 0.045657811425225826, 0.03185294504727273, 0.06935117047231186, 0.04172190039689802, 0.03425276773515326, 0.026059878383698207, 0.036898904779462276, 0.028279369668096504, 0.02565980895927092, 0.0072956961535024815]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 290 	 Test accuracy: 84.86 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 291 	 Test accuracy: 82.56 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 292 	 Test accuracy: 84.25 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 293 	 Test accuracy: 84.11999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 294 	 Test accuracy: 84.93 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 295 	 Test accuracy: 83.58 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 296 	 Test accuracy: 79.47 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 297 	 Test accuracy: 81.33 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 298 	 Test accuracy: 79.24 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 299 	 Test accuracy: 84.16 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:14<00:29, 14.73s/it] 67%|██████▋   | 2/3 [00:34<00:17, 17.76s/it]100%|██████████| 3/3 [00:48<00:00, 16.16s/it]100%|██████████| 3/3 [00:48<00:00, 16.30s/it]


scaleA
 [0.02152780176465149, 0.007534233987867831, 0.007829900938498825, 0.010181013229657676, 0.006932277272806379, 0.005749351921526779, 0.005121713753019944, 0.012287315702870782, 0.008451522214787913, 0.011833956288211918, 0.008069245019795999, 0.012761587329679311, 0.010064767848144198, 0.021101264955194737, 0.013173240169233378, 0.01848012235343408, 0.012486904148747528, 0.013952080802102548]
scaleW
 [0.16886940225246008, 0.12384616527336878, 0.1579832168202005, 0.07960669878273015, 0.1396980304811296, 0.050191565056710484, 0.07088362493433903, 0.06653811674007627, 0.06404949292558765, 0.04977601228617768, 0.059833341854248705, 0.0373005538859689, 0.03815260589106902, 0.032228678891966255, 0.032680865189034784, 0.028927473620050586, 0.028402429678898933, 0.01173402642307505]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 300 	 Test accuracy: 79.59 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 301 	 Test accuracy: 83.50999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 302 	 Test accuracy: 83.21 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 303 	 Test accuracy: 83.28 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 304 	 Test accuracy: 85.37 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 305 	 Test accuracy: 84.39999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 306 	 Test accuracy: 86.00999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 307 	 Test accuracy: 82.41000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 308 	 Test accuracy: 84.58 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 309 	 Test accuracy: 83.42 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:21<00:43, 21.85s/it] 67%|██████▋   | 2/3 [00:42<00:21, 21.31s/it]100%|██████████| 3/3 [00:55<00:00, 17.60s/it]100%|██████████| 3/3 [00:56<00:00, 18.67s/it]


scaleA
 [0.005343612615459484, 0.003546028354473428, 0.0048159573458362, 0.00465812348276136, 0.0, 0.0008656185559522941, 0.0032848380389080144, 0.005573405124780138, 0.0003977783288735438, 0.0009534462649513878, 0.0025377454267274517, 0.007621142246157506, 0.00684250784870404, 0.015476238860735089, 0.010869666487017808, 0.01296313641241234, 0.0071900930659727115, 0.009199038511321443]
scaleW
 [0.06591465187267669, 0.06630354038951419, 0.1123265602133009, 0.05233737162936888, 0.009721633515849997, 0.0, 0.04124961323275671, 0.036838003316409455, 0.0073513050915008545, 0.0035270071462887623, 0.03774757688390754, 0.02456583703376621, 0.02961120445288287, 0.028328042917443574, 0.025548755542270592, 0.018880943123482798, 0.015501146819071318, 0.0071443568854625]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 310 	 Test accuracy: 83.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 311 	 Test accuracy: 85.04 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 312 	 Test accuracy: 85.00999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 313 	 Test accuracy: 80.75 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 314 	 Test accuracy: 85.6 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 315 	 Test accuracy: 84.04 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 316 	 Test accuracy: 84.0 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 317 	 Test accuracy: 85.07000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 318 	 Test accuracy: 85.48 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 319 	 Test accuracy: 86.53999999999999 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:37, 18.98s/it] 67%|██████▋   | 2/3 [00:34<00:16, 16.96s/it]100%|██████████| 3/3 [00:53<00:00, 18.00s/it]100%|██████████| 3/3 [00:53<00:00, 17.94s/it]


scaleA
 [0.024974033180744506, 0.011507096508108319, 0.01362958937882978, 0.01580945616025981, 0.008119423175061294, 0.00787552640461879, 0.006365498221322011, 0.01264760931369769, 0.009415290806140975, 0.010217411201104679, 0.009455753582898978, 0.010610187058880408, 0.010047279077417847, 0.02298356262342476, 0.013964133088784117, 0.017748117230422713, 0.011029291966927575, 0.015793069966892604]
scaleW
 [0.20089073441472016, 0.1596991086394762, 0.2092358288646989, 0.12835095584156384, 0.16065142564995796, 0.08738233002527614, 0.08139609517014819, 0.06830885349310258, 0.06582326649154181, 0.04070126166241627, 0.06608983606953933, 0.03011999653193917, 0.04450560952575383, 0.0398920479723286, 0.03574581554406593, 0.028297291330506517, 0.026056993841879594, 0.014086425813779271]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 320 	 Test accuracy: 85.59 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 321 	 Test accuracy: 84.49 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 322 	 Test accuracy: 84.84 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 383
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 323 	 Test accuracy: 86.04 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 324 	 Test accuracy: 86.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 325 	 Test accuracy: 86.15 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 326 	 Test accuracy: 85.8 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 383
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 327 	 Test accuracy: 85.28999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 328 	 Test accuracy: 85.49 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 329 	 Test accuracy: 86.32 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:22<00:44, 22.20s/it] 67%|██████▋   | 2/3 [00:40<00:20, 20.15s/it]100%|██████████| 3/3 [01:00<00:00, 20.08s/it]100%|██████████| 3/3 [01:00<00:00, 20.32s/it]


scaleA
 [0.020486900864743668, 0.007846380111649684, 0.008904229899082523, 0.013241791029506922, 0.008990375366133172, 0.00674058184021548, 0.0038819080675612234, 0.007695417982097552, 0.008440989678529407, 0.010296058140435634, 0.006509583031561191, 0.007578554832146062, 0.006748369817335474, 0.013546609132622317, 0.011151032557050874, 0.012911545920866076, 0.0064285164953824985, 0.007182869282752701]
scaleW
 [0.14607989199125748, 0.10035606672462734, 0.12202555811419864, 0.12341079739662675, 0.1568105569479265, 0.0633059717705259, 0.05887073909400096, 0.03833398517134057, 0.056877623263974976, 0.03977865061251455, 0.0492323287019153, 0.024227822476542104, 0.027871940222271505, 0.022093199785075884, 0.027238572878534362, 0.017233023563589828, 0.015376038643972287, 0.0034429015068522515]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 330 	 Test accuracy: 86.46000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 331 	 Test accuracy: 86.61999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 332 	 Test accuracy: 87.21 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 333 	 Test accuracy: 85.0 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 334 	 Test accuracy: 85.42999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 335 	 Test accuracy: 86.57000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 336 	 Test accuracy: 83.78 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 337 	 Test accuracy: 85.0 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 338 	 Test accuracy: 87.51 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 339 	 Test accuracy: 86.67 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:37, 18.53s/it] 67%|██████▋   | 2/3 [00:37<00:18, 18.67s/it]100%|██████████| 3/3 [00:55<00:00, 18.41s/it]100%|██████████| 3/3 [00:55<00:00, 18.48s/it]


scaleA
 [0.026028417616789302, 0.010585799173481706, 0.011471919827980242, 0.013002548159474473, 0.008823264065250731, 0.007532536385291766, 0.007151254520867655, 0.01272327707560377, 0.00995222426638854, 0.01119054215991753, 0.009011367758057479, 0.012510996403551425, 0.01027791485884824, 0.021411889898192028, 0.013636267680534614, 0.018946403641578343, 0.01609698934841438, 0.016065360562960918]
scaleW
 [0.2289957820961317, 0.1855084692209792, 0.20146109605693976, 0.09254530390835143, 0.1989912097803804, 0.10326615321158933, 0.0990913268418206, 0.07893529597429964, 0.07039955019161111, 0.05292853037315706, 0.0807957822394358, 0.04660992729542119, 0.042027469171990045, 0.03628863831640486, 0.0348321384131859, 0.03017136053303752, 0.03798301988918453, 0.012707223281257613]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 340 	 Test accuracy: 86.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 341 	 Test accuracy: 86.33 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 342 	 Test accuracy: 87.01 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 343 	 Test accuracy: 87.17 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 383
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 344 	 Test accuracy: 86.17 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 345 	 Test accuracy: 86.41 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 346 	 Test accuracy: 87.72 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 347 	 Test accuracy: 87.0 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 348 	 Test accuracy: 87.02 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 349 	 Test accuracy: 87.19 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:17<00:34, 17.17s/it] 67%|██████▋   | 2/3 [00:39<00:20, 20.35s/it]100%|██████████| 3/3 [00:53<00:00, 17.12s/it]100%|██████████| 3/3 [00:53<00:00, 17.69s/it]


scaleA
 [0.030516147483509892, 0.01240934439808194, 0.014599228414308685, 0.01589789555105227, 0.01121006971762073, 0.010137357849235263, 0.007771201858241611, 0.01298257159740144, 0.01520820425832334, 0.017044323992258924, 0.007650749531361123, 0.00997958106477636, 0.011788487316505674, 0.022808783015567855, 0.016945719072717906, 0.024041864042883877, 0.020307180258944662, 0.020830693480243054]
scaleW
 [0.17530266225676097, 0.1919234437117072, 0.21915991877525606, 0.16442288558183632, 0.18827502025524365, 0.10525983606983497, 0.1047298851324648, 0.08251387204019882, 0.09782398534219135, 0.07394448401536684, 0.06450192905750814, 0.03108330255648369, 0.04896862384544357, 0.044724910875968575, 0.04675349042083349, 0.04120956227634487, 0.050298748381370884, 0.022828058566909507]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 350 	 Test accuracy: 87.16000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 351 	 Test accuracy: 87.53999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 352 	 Test accuracy: 87.47 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 353 	 Test accuracy: 87.46000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 354 	 Test accuracy: 87.38 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 355 	 Test accuracy: 86.97 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 356 	 Test accuracy: 87.63 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 357 	 Test accuracy: 87.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 358 	 Test accuracy: 87.58 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 359 	 Test accuracy: 87.74 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:21<00:42, 21.20s/it] 67%|██████▋   | 2/3 [00:39<00:19, 19.64s/it]100%|██████████| 3/3 [00:48<00:00, 14.83s/it]100%|██████████| 3/3 [00:48<00:00, 16.30s/it]


scaleA
 [0.007207315294932934, 0.0039020493748514722, 0.006744522084817606, 0.006165633952950618, 0.00011587757915037572, 0.0005862309866883907, 0.003910545004568984, 0.006351506372641855, 0.002950078519724836, 0.0, 0.001035637808748018, 0.0014317152851306301, 0.005715712340550673, 0.012863493969125265, 0.006860542558441991, 0.008234070084502559, 0.007669809251762965, 0.013765294304022492]
scaleW
 [0.07434746415006942, 0.06901622309591691, 0.1060571972363712, 0.0638855649650235, 0.039340241385062896, 0.000689112782087685, 0.04417881570350585, 0.04419101453988772, 0.02741260232502266, 0.0021234156657189717, 0.010157346245367219, 0.0, 0.028905789037803848, 0.02278663729844917, 0.016789024780211423, 0.015666505402783134, 0.016821508116013184, 0.015734848167582634]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 360 	 Test accuracy: 87.74 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 361 	 Test accuracy: 87.81 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 362 	 Test accuracy: 87.49 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 363 	 Test accuracy: 87.48 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 364 	 Test accuracy: 87.48 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 365 	 Test accuracy: 87.32 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 366 	 Test accuracy: 88.08 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 367 	 Test accuracy: 87.9 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 368 	 Test accuracy: 87.87 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 369 	 Test accuracy: 87.92 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:36, 18.33s/it] 67%|██████▋   | 2/3 [00:36<00:18, 18.22s/it]100%|██████████| 3/3 [00:54<00:00, 18.36s/it]100%|██████████| 3/3 [00:55<00:00, 18.35s/it]


scaleA
 [0.033435099312056654, 0.011664042309072883, 0.015284997961249496, 0.018387797812547506, 0.013601745339815544, 0.01210317050952474, 0.00806694868440395, 0.015797927936120015, 0.011451146257054507, 0.015377591230518683, 0.012078621306606327, 0.015000359000332045, 0.012268502616727843, 0.0320118093773254, 0.014762507923470761, 0.021915581112826137, 0.01255401703639837, 0.017405267307369077]
scaleW
 [0.24286539684739447, 0.17450085656851003, 0.27700621679641485, 0.19682811529482605, 0.2487805766733313, 0.14876754440750176, 0.12310280007424368, 0.10109409109078184, 0.07898467405626693, 0.06000439904753551, 0.09690790011817467, 0.052231993984480314, 0.05601111609876978, 0.05610388174497313, 0.04306564125709889, 0.039029752657412965, 0.03153067807903711, 0.018660233632346764]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 370 	 Test accuracy: 87.72 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 371 	 Test accuracy: 87.82 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 372 	 Test accuracy: 88.16000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 373 	 Test accuracy: 87.76 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 374 	 Test accuracy: 87.99 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 375 	 Test accuracy: 87.94 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 376 	 Test accuracy: 87.94999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 377 	 Test accuracy: 87.92 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 378 	 Test accuracy: 87.99 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 379 	 Test accuracy: 87.98 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:20<00:40, 20.18s/it] 67%|██████▋   | 2/3 [00:38<00:18, 18.96s/it]100%|██████████| 3/3 [00:59<00:00, 20.07s/it]100%|██████████| 3/3 [00:59<00:00, 19.91s/it]


scaleA
 [0.019511106130589317, 0.008442146068500416, 0.010115878842453706, 0.011846803693904123, 0.006051864012383196, 0.006826799466425778, 0.006583403515579191, 0.013304119507857237, 0.008059422478648106, 0.008553618199261454, 0.005915404268892199, 0.00837080376871937, 0.008509314810862466, 0.023168521909583756, 0.009010963016174149, 0.013303845515368826, 0.015598858036467716, 0.02014662956900176]
scaleW
 [0.19698922804797028, 0.13272991892164018, 0.19380376448411343, 0.12064253735062887, 0.14944585574100586, 0.06875099347555191, 0.08723615904826088, 0.07559412259374086, 0.06020131956140166, 0.03761202126388414, 0.06479667153344947, 0.023466505283267977, 0.040646210234834376, 0.04489895393451345, 0.024952982846092802, 0.02345448322856414, 0.03989640438529737, 0.02043910633557992]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 380 	 Test accuracy: 88.33 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 381 	 Test accuracy: 87.92 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 382 	 Test accuracy: 88.21 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 383 	 Test accuracy: 88.19 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 384 	 Test accuracy: 88.22 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 385 	 Test accuracy: 88.19 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 386 	 Test accuracy: 87.98 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 387 	 Test accuracy: 87.97 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 388 	 Test accuracy: 88.49000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 389 	 Test accuracy: 88.2 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:27<00:55, 27.62s/it] 67%|██████▋   | 2/3 [00:49<00:24, 24.50s/it]100%|██████████| 3/3 [01:09<00:00, 22.18s/it]100%|██████████| 3/3 [01:09<00:00, 23.13s/it]


scaleA
 [0.02024957901535725, 0.0073404146745664435, 0.007495886897389302, 0.009883546828674481, 0.007919836365080696, 0.006750583121927565, 0.005609039338355978, 0.009072666607234237, 0.007520160150643245, 0.009589256997492641, 0.004562757855905305, 0.0061560064517896425, 0.008568044942467894, 0.017846975657528196, 0.010439703335297807, 0.013141644438147623, 0.007940051498388787, 0.012714106932412312]
scaleW
 [0.15249721625276555, 0.11115713075533747, 0.13163383630819797, 0.08197169327099671, 0.13060170977347965, 0.086320661227599, 0.0674857290984585, 0.05010464928215925, 0.04055294422967564, 0.03668630002755251, 0.0407108803526115, 0.024077019257706944, 0.03636135163720611, 0.032174670948240024, 0.02813902584044342, 0.020071025258706413, 0.021125557418460904, 0.012064245623449939]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 390 	 Test accuracy: 88.22 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 391 	 Test accuracy: 88.1 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 392 	 Test accuracy: 88.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 393 	 Test accuracy: 88.24 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 394 	 Test accuracy: 88.1 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 395 	 Test accuracy: 88.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 396 	 Test accuracy: 88.08 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 397 	 Test accuracy: 88.25 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 398 	 Test accuracy: 88.1 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.0.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.1.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv1.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer1.2.conv2.weight
torch.Size([12, 192]) (192, 12) 384
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv1.weight
torch.Size([12, 384]) (384, 12) 384
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.0.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.1.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv1.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer2.2.conv2.weight
torch.Size([12, 768]) (768, 12) 384
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv1.weight
torch.Size([12, 1536]) (1536, 12) 384
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.0.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.1.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv1.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: False
product quantization with block_size:  12 layer3.2.conv2.weight
torch.Size([12, 3072]) (3072, 12) 384
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.49184263169593245
Current epoch: 399 	 Test accuracy: 88.26 %
The best checkpoint is loaded
Test accuracy: 88.49000000000001%
