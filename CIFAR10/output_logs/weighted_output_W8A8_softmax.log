dataset: cifar10	arch: resnet20_quant	num_workers: 4	seed: None	batch_size: 32	epochs: 400	optimizer_m: Adam	optimizer_q: Adam	lr_m: 0.001	lr_q: 1e-05	lr_m_end: 0.0	lr_q_end: 0.0	decay_schedule_m: 150-300	decay_schedule_q: 150-300	momentum: 0.9	weight_decay: 0.0001	lr_scheduler_m: cosine	lr_scheduler_q: cosine	gamma: 0.1	QWeightFlag: True	QActFlag: True	weight_levels: 256	act_levels: 256	baseline: False	bkwd_scaling_factorW: 0.0	bkwd_scaling_factorA: 0.0	use_hessian: True	update_every: 10	gpu_id: 1	log_dir: ../results/CIFAR10_ResNet50/W8A8_kmeans_comp_decomp_weighted_softmax/	load_pretrain: True	pretrain_path: ../results/ResNet20_CIFAR10/fp/checkpoint/best_checkpoint.pth	btq: True	training_flag: False	eval: False	weighted: True	
Files already downloaded and verified
The number of parameters :  269940
Pretrained full precision weights are initialized
# total params: 269940
# model params: 269850
# quantizer params: 90
ResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (layer1): Sequential(
    (0): QBasicBlock(
      (conv1): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (1): QBasicBlock(
      (conv1): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (2): QBasicBlock(
      (conv1): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
  )
  (layer2): Sequential(
    (0): QBasicBlock(
      (conv1): QConv(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): LambdaLayer()
    )
    (1): QBasicBlock(
      (conv1): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (2): QBasicBlock(
      (conv1): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
  )
  (layer3): Sequential(
    (0): QBasicBlock(
      (conv1): QConv(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): LambdaLayer()
    )
    (1): QBasicBlock(
      (conv1): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
    (2): QBasicBlock(
      (conv1): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): QConv(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (shortcut): Sequential()
    )
  )
  (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (linear): Linear(in_features=64, out_features=10, bias=True)
)
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999996 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 000 	 Test accuracy: 16.27 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 001 	 Test accuracy: 17.630000000000003 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 002 	 Test accuracy: 24.42 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 003 	 Test accuracy: 24.099999999999998 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 004 	 Test accuracy: 36.34 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000005 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999992 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 005 	 Test accuracy: 31.019999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999917 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 006 	 Test accuracy: 25.41 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999905 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 007 	 Test accuracy: 43.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 008 	 Test accuracy: 29.73 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 009 	 Test accuracy: 33.53 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:20<00:41, 20.80s/it] 67%|██████▋   | 2/3 [00:37<00:18, 18.23s/it]100%|██████████| 3/3 [00:53<00:00, 17.37s/it]100%|██████████| 3/3 [00:53<00:00, 17.87s/it]


scaleA
 [0.012411023863596096, 0.007105181490487898, 0.006111047203239556, 0.00707272183169444, 0.005312609441885819, 0.006040208011134363, 0.004669524363364413, 0.009063307921953494, 0.004150650845892896, 0.008429411882010922, 0.007817826072429404, 0.011124972807997721, 0.008146366261838053, 0.014382177807367886, 0.014257436182391026, 0.01558988927866961, 0.010056830597918578, 0.006953441788434223]
scaleW
 [0.10078235407957577, 0.10621442647750845, 0.12039663942183043, 0.06506167954284693, 0.1232373720182, 0.051861511258305126, 0.05719948991955426, 0.04658007603639507, 0.032594536349258664, 0.02664676450266799, 0.05050316744574763, 0.0317004278573865, 0.02725572160475784, 0.021387013881687286, 0.027801234115409395, 0.019465404652300736, 0.018561473688139454, 0.0031582646684576525]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999998 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 010 	 Test accuracy: 58.220000000000006 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 011 	 Test accuracy: 45.76 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999991 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 012 	 Test accuracy: 38.45 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 013 	 Test accuracy: 50.3 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000004 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999999 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 014 	 Test accuracy: 41.29 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 015 	 Test accuracy: 44.67 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 016 	 Test accuracy: 39.6 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000004 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 017 	 Test accuracy: 57.68 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999995 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 018 	 Test accuracy: 60.79 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999996 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 019 	 Test accuracy: 56.10000000000001 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:16<00:33, 16.61s/it] 67%|██████▋   | 2/3 [00:32<00:16, 16.39s/it]100%|██████████| 3/3 [00:49<00:00, 16.64s/it]100%|██████████| 3/3 [00:49<00:00, 16.61s/it]


scaleA
 [0.019792321684657124, 0.011817685490504536, 0.011266911290631622, 0.012251190364262426, 0.007129177255113396, 0.008630222914479615, 0.00673338656846453, 0.013773512567093962, 0.01004868693869658, 0.012347640927559541, 0.01133252890214418, 0.014861572598094017, 0.01279978341728522, 0.029911978467284578, 0.018588383654974703, 0.024223856696813043, 0.0166386245496789, 0.013945114994361713]
scaleW
 [0.13057384639013833, 0.11161923015154208, 0.13837207319461836, 0.08551386598275197, 0.11107001013442169, 0.06979614418711762, 0.06256405583849493, 0.05109211706270995, 0.0517240097543066, 0.03202485284539763, 0.059298829891839544, 0.038028147367418774, 0.0365913458625006, 0.034131321568976754, 0.02945917817234771, 0.024924880781647608, 0.02786816402370183, 0.009703262051757115]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 020 	 Test accuracy: 63.019999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999995 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 021 	 Test accuracy: 55.65 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000004 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999917 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 022 	 Test accuracy: 59.69 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999998 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 023 	 Test accuracy: 53.690000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999996 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 024 	 Test accuracy: 63.370000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000004 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 025 	 Test accuracy: 37.13 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999997 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999946 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999998 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 026 	 Test accuracy: 54.690000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999905 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 027 	 Test accuracy: 66.67999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 028 	 Test accuracy: 53.15 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 029 	 Test accuracy: 58.08 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:13<00:27, 13.57s/it] 67%|██████▋   | 2/3 [00:29<00:15, 15.13s/it]100%|██████████| 3/3 [00:47<00:00, 16.20s/it]100%|██████████| 3/3 [00:47<00:00, 15.77s/it]


scaleA
 [0.013928006246805335, 0.007353182632865638, 0.004509111469403659, 0.0060705082588555954, 0.004801397951010592, 0.004348412902699834, 0.003210842180501099, 0.007196867486253593, 0.008399981332455503, 0.007914272955037533, 0.0026732447660661857, 0.004564446007515511, 0.005373458297558892, 0.015397953673447554, 0.006661159579103995, 0.006059278483236842, 0.007687788578696344, 0.011945587721132944]
scaleW
 [0.08846228537294681, 0.07367851460857155, 0.07704719539999123, 0.04405931419843032, 0.06843428578727247, 0.021323048261831182, 0.03620032834251138, 0.029207136191045646, 0.03925716610168973, 0.022568232482539263, 0.021387351470744973, 0.0080753179588871, 0.020529000329055178, 0.01893619914052855, 0.01086479375056947, 0.007418489572769024, 0.01236224915531276, 0.009475497008083896]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999996 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 030 	 Test accuracy: 61.629999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999993 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 031 	 Test accuracy: 49.47 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999999 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 032 	 Test accuracy: 60.69 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 033 	 Test accuracy: 54.910000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 034 	 Test accuracy: 31.41 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999993 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 035 	 Test accuracy: 67.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999993 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 036 	 Test accuracy: 57.879999999999995 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 037 	 Test accuracy: 68.45 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 038 	 Test accuracy: 65.08 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 039 	 Test accuracy: 60.38 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:19<00:39, 19.99s/it] 67%|██████▋   | 2/3 [00:37<00:18, 18.25s/it]100%|██████████| 3/3 [00:51<00:00, 16.65s/it]100%|██████████| 3/3 [00:51<00:00, 17.27s/it]


scaleA
 [0.010546701638541814, 0.0055930180284661625, 0.005432004394670623, 0.006291812627480003, 0.004675760476195125, 0.005402896043682282, 0.0036166649040052386, 0.005818351072878547, 0.004302935576877275, 0.004738722766475573, 0.002911852437340401, 0.003214224406753197, 0.007766164626906637, 0.015395242638187501, 0.0080797498386564, 0.01151896271565376, 0.012012133735294514, 0.011327124513219653]
scaleW
 [0.056804321731686945, 0.05878201147857878, 0.0872992288222677, 0.04663675807897941, 0.06108549733335158, 0.04243492978016477, 0.036672557467235765, 0.021725957107707545, 0.02109143806627185, 0.009604509979015973, 0.01939372755570756, 0.002791367116114767, 0.02156648275007555, 0.01771698144332598, 0.011235097892320613, 0.008563811400327019, 0.017625149960312066, 0.006886393687116336]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 040 	 Test accuracy: 69.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 191
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 041 	 Test accuracy: 68.67 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 042 	 Test accuracy: 65.64999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999946 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 043 	 Test accuracy: 68.08999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 044 	 Test accuracy: 76.44999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 045 	 Test accuracy: 59.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 046 	 Test accuracy: 66.96 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000007 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 047 	 Test accuracy: 66.77 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 048 	 Test accuracy: 69.6 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999917 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 049 	 Test accuracy: 57.11000000000001 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:37, 18.75s/it] 67%|██████▋   | 2/3 [00:38<00:19, 19.46s/it]100%|██████████| 3/3 [00:58<00:00, 19.55s/it]100%|██████████| 3/3 [00:58<00:00, 19.47s/it]


scaleA
 [0.010991100580817531, 0.006721295040437613, 0.007080578592190715, 0.008138340382531523, 0.005649471020353104, 0.006249851719600561, 0.005461621089509321, 0.00852349268670673, 0.003624631687949348, 0.007592214540999635, 0.007532332700643567, 0.006464259071359209, 0.007469879360675038, 0.017981951744990007, 0.008372933160549044, 0.010273046284518368, 0.010174817975893485, 0.008555896813005006]
scaleW
 [0.06616663835928059, 0.07532394134343771, 0.11613856307606811, 0.05724653392369217, 0.09940849642952443, 0.04264348529525316, 0.055447711004804, 0.03451035451742744, 0.02627545008293815, 0.01977123788355617, 0.039958009186368666, 0.014719024192829604, 0.022199839339830593, 0.018854711836062254, 0.014013624071179084, 0.008233311873997931, 0.015190419798958446, 0.005802110934137998]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999999 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 050 	 Test accuracy: 71.75 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 051 	 Test accuracy: 72.35000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 052 	 Test accuracy: 65.84 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000005 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999992 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 053 	 Test accuracy: 59.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999992 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999917 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 054 	 Test accuracy: 48.199999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 055 	 Test accuracy: 68.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999905 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 056 	 Test accuracy: 50.42 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 057 	 Test accuracy: 55.800000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999946 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000004 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999995 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 058 	 Test accuracy: 64.19 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999946 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 059 	 Test accuracy: 69.73 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:37, 18.58s/it] 67%|██████▋   | 2/3 [00:38<00:19, 19.62s/it]100%|██████████| 3/3 [00:55<00:00, 18.12s/it]100%|██████████| 3/3 [00:55<00:00, 18.43s/it]


scaleA
 [0.012661434112171402, 0.006398017809442852, 0.006141942208167551, 0.008487696471641416, 0.006153223128401289, 0.00692623373273295, 0.005012049229710293, 0.00978629348142925, 0.006311260451817734, 0.00824982584645159, 0.008946314845222857, 0.013579668671542639, 0.010266833674749802, 0.02142768455910075, 0.008968995866908277, 0.014505621533814392, 0.011321697180178397, 0.011008143688778704]
scaleW
 [0.06914078716108844, 0.07009666510697359, 0.10317170317274234, 0.06490840781553457, 0.08922954846344956, 0.047029293307511155, 0.053342702193932084, 0.0418844541831942, 0.029858840569884627, 0.02075097848696973, 0.04619027084610369, 0.030080067477421934, 0.028500208135334465, 0.021420672406963815, 0.013910766427219239, 0.014767063961464542, 0.01429220851241699, 0.004780631708272579]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999997 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 060 	 Test accuracy: 55.910000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000004 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 061 	 Test accuracy: 64.41 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000008 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 062 	 Test accuracy: 62.339999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999997 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 063 	 Test accuracy: 71.74000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999996 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 064 	 Test accuracy: 62.980000000000004 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 065 	 Test accuracy: 68.47 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999998 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 066 	 Test accuracy: 67.12 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 067 	 Test accuracy: 51.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 068 	 Test accuracy: 73.52 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 069 	 Test accuracy: 72.54 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:19<00:39, 19.94s/it] 67%|██████▋   | 2/3 [00:37<00:18, 18.31s/it]100%|██████████| 3/3 [00:56<00:00, 18.93s/it]100%|██████████| 3/3 [00:56<00:00, 18.94s/it]


scaleA
 [0.012406081555520747, 0.00736658684956755, 0.007727117571147132, 0.01122082883108607, 0.0015340600475561622, 0.004765251621223605, 0.005779961172581439, 0.008952701597422003, 0.0071829718935915235, 0.011715060800452955, 0.008091864064020194, 0.010257572649673327, 0.009275296981596114, 0.02171700786878851, 0.018229556852953424, 0.021358495898933145, 0.015824236336079912, 0.010773347697723229]
scaleW
 [0.07173170339088866, 0.07058168405273325, 0.1148858939915036, 0.06623578348245825, 0.05642830234615118, 0.026340570767143384, 0.05003515691108784, 0.033088732665030395, 0.03760702278940703, 0.02637232337689298, 0.034953806287880175, 0.024355197468845086, 0.027562432775821367, 0.024115155765984386, 0.02863000055597299, 0.020266560407484566, 0.02317751585971031, 0.006629192569164538]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 070 	 Test accuracy: 69.77 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 071 	 Test accuracy: 74.22999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999998 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 072 	 Test accuracy: 70.89 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999997 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 073 	 Test accuracy: 59.34 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 074 	 Test accuracy: 60.96 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 075 	 Test accuracy: 73.29 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 076 	 Test accuracy: 64.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 077 	 Test accuracy: 79.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999997 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 078 	 Test accuracy: 52.94 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 079 	 Test accuracy: 66.53999999999999 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:17<00:35, 17.68s/it] 67%|██████▋   | 2/3 [00:32<00:16, 16.12s/it]100%|██████████| 3/3 [00:52<00:00, 17.98s/it]100%|██████████| 3/3 [00:52<00:00, 17.65s/it]


scaleA
 [0.015017062207649987, 0.008658023147529679, 0.007604067945122383, 0.00959418458654451, 0.0044621340281709556, 0.006046183474769839, 0.0059618461279088535, 0.010924552454398287, 0.004669556073884326, 0.005594881173705782, 0.0022979322685399563, 0.006623031303230596, 0.0075425293433407405, 0.01536833840782397, 0.012082260999305325, 0.012911048693406845, 0.010894081596587878, 0.011933614183323428]
scaleW
 [0.11448738589820906, 0.08305116974471198, 0.11542716361179998, 0.06574040089478493, 0.07276927524133979, 0.041774642327398026, 0.06077565792468209, 0.041193968160046945, 0.02409473953201571, 0.00913244851004446, 0.019798437230819286, 0.004924665559069491, 0.02038899536490682, 0.017205784149672502, 0.017401150060974795, 0.013068315352060505, 0.015040779255281333, 0.007913891305544507]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000004 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 080 	 Test accuracy: 62.260000000000005 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 081 	 Test accuracy: 70.55 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999992 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 082 	 Test accuracy: 74.92999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 083 	 Test accuracy: 71.24000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999992 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999992 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 084 	 Test accuracy: 60.519999999999996 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999917 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 085 	 Test accuracy: 72.46000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 086 	 Test accuracy: 76.25 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 087 	 Test accuracy: 66.91 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 088 	 Test accuracy: 72.03 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999905 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 089 	 Test accuracy: 60.3 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:16<00:33, 16.92s/it] 67%|██████▋   | 2/3 [00:33<00:16, 16.70s/it]100%|██████████| 3/3 [00:50<00:00, 16.83s/it]100%|██████████| 3/3 [00:50<00:00, 16.83s/it]


scaleA
 [0.012711487467861498, 0.00618032841022418, 0.006830656346994427, 0.008450346174221282, 0.005188878746589015, 0.007837887958144493, 0.005179555710737295, 0.008443850119496086, 0.006433758471661982, 0.009222136467907273, 0.009310239422441104, 0.012190417815222017, 0.006873158446362636, 0.014917378229196246, 0.0070173440621990255, 0.011016491322479676, 0.0094187258502332, 0.008569657836548462]
scaleW
 [0.08093695591202386, 0.05964900907328269, 0.10548837048356542, 0.055903381581544585, 0.09974870649713137, 0.061385454708208005, 0.044066483665067595, 0.03143569851614423, 0.03330478516691348, 0.026045142450767958, 0.04112554312909755, 0.028931062223194876, 0.019075013859461278, 0.0138878828130837, 0.015099564358853694, 0.008210243089408919, 0.011071385246864423, 0.005909216417900748]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999999 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 090 	 Test accuracy: 63.39 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 091 	 Test accuracy: 55.32 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 092 	 Test accuracy: 73.76 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 093 	 Test accuracy: 74.67 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000004 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 094 	 Test accuracy: 69.63000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 095 	 Test accuracy: 78.34 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 096 	 Test accuracy: 71.03 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999992 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 097 	 Test accuracy: 78.35 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 098 	 Test accuracy: 80.16 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999905 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 099 	 Test accuracy: 67.14 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:17<00:34, 17.38s/it] 67%|██████▋   | 2/3 [00:39<00:19, 19.91s/it]100%|██████████| 3/3 [00:54<00:00, 17.93s/it]100%|██████████| 3/3 [00:54<00:00, 18.22s/it]


scaleA
 [0.01367285759376965, 0.0060925373971122505, 0.006478034954352778, 0.008943134797598878, 0.004566501193657542, 0.00594336857155393, 0.004271128106077236, 0.0071582044659049, 0.005063949162924601, 0.007298766091731708, 0.0049702396072128984, 0.0068870264147167445, 0.006867260492965616, 0.01658328101257033, 0.004124884529151409, 0.008787117204640907, 0.008753765805244866, 0.009507899185060549]
scaleW
 [0.07295909635960666, 0.06232098365480588, 0.10301802080334882, 0.06656409619217124, 0.05806095447899858, 0.03658037286054424, 0.038025726769171785, 0.02588525477840538, 0.02803866591936431, 0.01799644932616561, 0.029940433073569358, 0.014201908199077629, 0.016367739040525183, 0.01728517894707024, 0.005328117391811893, 0.009711590274242071, 0.010706072872187604, 0.0033049188540526134]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999992 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 100 	 Test accuracy: 70.14 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999934 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 101 	 Test accuracy: 65.91 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999905 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 102 	 Test accuracy: 69.94 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 103 	 Test accuracy: 80.92 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 104 	 Test accuracy: 75.79 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 105 	 Test accuracy: 72.91 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 106 	 Test accuracy: 65.64999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999995 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 107 	 Test accuracy: 69.61 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999995 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 108 	 Test accuracy: 65.55 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999905 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 109 	 Test accuracy: 78.55 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:15<00:31, 15.67s/it] 67%|██████▋   | 2/3 [00:29<00:14, 14.83s/it]100%|██████████| 3/3 [00:50<00:00, 17.58s/it]100%|██████████| 3/3 [00:50<00:00, 16.94s/it]


scaleA
 [0.01583567972845219, 0.008511087041907762, 0.00786207458506308, 0.009325071797625937, 0.002838867310300393, 0.00534675897812439, 0.0052031041709785335, 0.007781216213729407, 0.0076007486798754095, 0.009648680032886192, 0.006427520955506688, 0.008904899148864989, 0.008153009500110095, 0.019989887376752682, 0.006116344161335589, 0.011300853823148655, 0.010271134038774152, 0.010566631440646906]
scaleW
 [0.08749089247857811, 0.09262489658791495, 0.11567910735384375, 0.0760835547589815, 0.07339470602958033, 0.03473254991017721, 0.05001980248996681, 0.02991992024622601, 0.03282881324728899, 0.02812853036855115, 0.03047057029295577, 0.01994536586220509, 0.022339072217891876, 0.02196122096919416, 0.009361580172714976, 0.007909324366223812, 0.014039581795291538, 0.006644391716462759]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000008 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 110 	 Test accuracy: 71.31 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999996 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 111 	 Test accuracy: 75.26 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999997 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 112 	 Test accuracy: 75.24 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 113 	 Test accuracy: 79.29 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 114 	 Test accuracy: 71.32 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999905 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 115 	 Test accuracy: 71.35000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000001 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 116 	 Test accuracy: 73.22999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999995 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 117 	 Test accuracy: 76.97 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999917 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 118 	 Test accuracy: 78.64 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 119 	 Test accuracy: 69.58 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:12<00:25, 12.52s/it] 67%|██████▋   | 2/3 [00:30<00:16, 16.01s/it]100%|██████████| 3/3 [00:46<00:00, 15.94s/it]100%|██████████| 3/3 [00:46<00:00, 15.62s/it]


scaleA
 [0.010564159574241271, 0.005084877762225759, 0.007066772246824622, 0.007680455178255948, 0.003211760520832757, 0.005172420482042876, 0.0034537486299982805, 0.005751965543599976, 0.001705735865772587, 0.002057632184327322, 0.0021694375972021052, 0.0017651236820814414, 0.00704252638072259, 0.01796396379883822, 0.01157046065197743, 0.018061305167483544, 0.006712457625445121, 0.01703926824317538]
scaleW
 [0.07549215127922321, 0.06703443471698334, 0.11389750882105809, 0.07263011384925477, 0.06617712086150934, 0.033540151981472525, 0.034811505575095276, 0.026559839788764528, 0.014008010725187406, 0.00808786445106123, 0.012113783073254997, 0.0031596023495645523, 0.02093566357075771, 0.018054475083810254, 0.017570992178760136, 0.014428510462543962, 0.011359293298674042, 0.011776255915079336]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000006 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 120 	 Test accuracy: 81.58999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 121 	 Test accuracy: 73.58 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 122 	 Test accuracy: 71.03 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 123 	 Test accuracy: 80.39 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 124 	 Test accuracy: 78.9 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999997 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 125 	 Test accuracy: 79.36 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999998 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 126 	 Test accuracy: 77.46 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000004 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 127 	 Test accuracy: 69.89999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999997 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999976 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999946 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 128 	 Test accuracy: 74.81 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999997 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 129 	 Test accuracy: 72.86 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:19<00:39, 19.87s/it] 67%|██████▋   | 2/3 [00:40<00:20, 20.05s/it]100%|██████████| 3/3 [00:57<00:00, 19.08s/it]100%|██████████| 3/3 [00:58<00:00, 19.34s/it]


scaleA
 [0.022712089939748988, 0.010371463659534065, 0.008086161792159147, 0.01124624623162533, 0.006969712750647923, 0.007140668458254939, 0.006182991615880074, 0.010203700013547543, 0.008453735739441255, 0.011085139696417473, 0.007484942570122989, 0.01102576314639417, 0.012298689809994495, 0.02409636160635815, 0.012668081844552204, 0.0181248173592635, 0.01526268282389199, 0.014302694846770507]
scaleW
 [0.11392666815671156, 0.10713202178981596, 0.12083139499968494, 0.08686216714197982, 0.09261787831577038, 0.04856463669175313, 0.05179517076610221, 0.04176026499284139, 0.03840533922347353, 0.02407523511790688, 0.03983486451707764, 0.024755633870704036, 0.032528014743585125, 0.028268233485188782, 0.019095579694836867, 0.018887068906012133, 0.019685115368513268, 0.009648108534011426]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000006 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 130 	 Test accuracy: 75.3 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 131 	 Test accuracy: 79.34 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999946 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 132 	 Test accuracy: 67.25 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999905 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 133 	 Test accuracy: 76.55 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 134 	 Test accuracy: 80.39 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000006 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 135 	 Test accuracy: 78.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999995 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 136 	 Test accuracy: 82.55 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999997 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000004 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 137 	 Test accuracy: 77.66999999999999 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 138 	 Test accuracy: 75.75 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999999 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 139 	 Test accuracy: 80.10000000000001 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:15<00:31, 15.75s/it] 67%|██████▋   | 2/3 [00:38<00:19, 19.75s/it]100%|██████████| 3/3 [00:59<00:00, 20.36s/it]100%|██████████| 3/3 [00:59<00:00, 19.81s/it]


scaleA
 [0.015763076570173538, 0.008069549916422258, 0.006690891113150722, 0.008328637855404547, 0.005141824773475937, 0.007193407988844801, 0.005767022519701415, 0.010609177187547884, 0.007702973205038866, 0.00971502321395172, 0.0048752767005450885, 0.008208174491317393, 0.008408345303645303, 0.018713664151899678, 0.009822580958511875, 0.015231835627413736, 0.014637998960241769, 0.02056096012859028]
scaleW
 [0.08958797784533823, 0.07583449010891324, 0.09911956408162144, 0.050261579711696036, 0.08943479692412777, 0.06007001761317299, 0.04933759632210386, 0.03860303427582839, 0.03478305383144816, 0.02547788697999594, 0.0194255624122186, 0.017558448412796114, 0.023103490152254946, 0.021666548683157195, 0.016113083816972233, 0.01346248114014643, 0.021380577562612944, 0.013223994113981112]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000004 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 140 	 Test accuracy: 72.15 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999998 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999995 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 141 	 Test accuracy: 74.53 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999995 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999999 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 142 	 Test accuracy: 83.2 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 143 	 Test accuracy: 77.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000005 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999917 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 144 	 Test accuracy: 67.53 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999994 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 145 	 Test accuracy: 80.7 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999993 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 146 	 Test accuracy: 80.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.9999997 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000006 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 147 	 Test accuracy: 81.44 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999964 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 148 	 Test accuracy: 81.42 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.9999997 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999995 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000005 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999934 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.9999997 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 149 	 Test accuracy: 76.28 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:18<00:36, 18.30s/it] 67%|██████▋   | 2/3 [00:35<00:17, 17.42s/it]100%|██████████| 3/3 [00:52<00:00, 17.31s/it]100%|██████████| 3/3 [00:52<00:00, 17.44s/it]


scaleA
 [0.01828926500237145, 0.008384245952748247, 0.010510448665937736, 0.011841070394647815, 0.003919771459137172, 0.005044151353354469, 0.005557968062715516, 0.01026715373739896, 0.0027063215236313204, 0.0064547871537754264, 0.008739522993006484, 0.012907502762401662, 0.012192653855747892, 0.029555262239141202, 0.016725834665718593, 0.021730945510610233, 0.011391546049667148, 0.018890963787000527]
scaleW
 [0.10833345097158047, 0.08783083633436974, 0.1551521279111381, 0.07911611232492617, 0.07232669632477158, 0.032486832741344084, 0.05682471039484066, 0.03938000655087831, 0.01908281662608387, 0.01323646085264929, 0.04195788790740582, 0.026006034480227553, 0.033668353848500636, 0.029968777779052182, 0.026305684143488547, 0.018976776303536308, 0.014672378556523332, 0.010652270900171429]

layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999998 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 150 	 Test accuracy: 78.09 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999999 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999998 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 151 	 Test accuracy: 73.46000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000008 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999996 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 152 	 Test accuracy: 73.45 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999994 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999999 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 153 	 Test accuracy: 75.66000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 0.99999976 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999964 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 154 	 Test accuracy: 82.45 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999995 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.99999976 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000005 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.99999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.99999994 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999917 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000004 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 155 	 Test accuracy: 77.05 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.9999996 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 0.9999999 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 0.99999976 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999998 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000002 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999976 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000005 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 156 	 Test accuracy: 78.38000000000001 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 0.99999994 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0000005 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 1.0000001 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000002 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 0.9999997 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 0.9999999 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 0.99999964 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 0.9999994 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 157 	 Test accuracy: 80.11 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0000004 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000001 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000007 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999999 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 158 	 Test accuracy: 79.23 %
layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv1.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.0.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.0.conv2.weight
sum of grad_np 1.0000004 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv1.weight
sum of grad_np 1.0 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.1.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.1.conv2.weight
sum of grad_np 0.99999964 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv1.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv1.weight
sum of grad_np 0.9999998 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
Quantizing weight: layer1.2.conv2.weight torch.Size([16, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer1.2.conv2.weight
sum of grad_np 1.0000002 (384,)
torch.Size([6, 384]) (384, 6) 192
final weight shape: torch.Size([16, 16, 3, 3])
layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
Quantizing weight: layer2.0.conv1.weight torch.Size([32, 16, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv1.weight
sum of grad_np 1.0 (768,)
torch.Size([6, 768]) (768, 6) 192
final weight shape: torch.Size([32, 16, 3, 3])
layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.0.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.0.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv1.weight
sum of grad_np 1.0 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.1.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.1.conv2.weight
sum of grad_np 1.0000002 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv1.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv1.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
Quantizing weight: layer2.2.conv2.weight torch.Size([32, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer2.2.conv2.weight
sum of grad_np 1.0000004 (1536,)
torch.Size([6, 1536]) (1536, 6) 192
final weight shape: torch.Size([32, 32, 3, 3])
layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
Quantizing weight: layer3.0.conv1.weight torch.Size([64, 32, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv1.weight
sum of grad_np 1.0000001 (3072,)
torch.Size([6, 3072]) (3072, 6) 192
final weight shape: torch.Size([64, 32, 3, 3])
layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.0.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.0.conv2.weight
sum of grad_np 1.0000001 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv1.weight
sum of grad_np 1.0000002 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.1.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.1.conv2.weight
sum of grad_np 0.9999995 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv1.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv1.weight
sum of grad_np 0.99999964 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
Quantizing weight: layer3.2.conv2.weight torch.Size([64, 64, 3, 3])
weighted k-means: True
product quantization with block_size:  6 layer3.2.conv2.weight
sum of grad_np 0.99999917 (6144,)
torch.Size([6, 6144]) (6144, 6) 192
final weight shape: torch.Size([64, 64, 3, 3])
Bit ratio for compressed layers: 0.9043787508335186
Current epoch: 159 	 Test accuracy: 80.38 %
  0%|          | 0/3 [00:00<?, ?it/s] 33%|███▎      | 1/3 [00:17<00:34, 17.31s/it]